;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           jetton_wallet_address:MsgAddress
;;           = Storage;

#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

const int min_gas_for_mint = 50000000;  ;; 0.05 TON
const int min_gas_for_jetton_transfer = 110000000;  ;; 0.1 TON
const int lockup_period_const = 60 * 60 * 24 * 14; ;; lockup period in seconds

(slice, int, cell, cell, cell, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref(),  ;; royalty_params
     ds~load_msg_addr() ;; jetton_wallet_address
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, slice jetton_address) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_slice(jetton_address)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 64); 
}



() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_address) = load_data();
    
    if (op == 3) {  ;; change owner
      throw_unless(401, equal_slices(sender_address, owner_address));
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, jetton_address);

      return ();
    }

    ;; custom op-codes for staking

    ;; op-code for save new jetton_wallet_address in storage
    if (op == 4) {
      throw_unless(403, equal_slices(sender_address, owner_address));

      slice new_jetton_address = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_jetton_address);

      return ();
    }

    ;; jetton transfer notification
    if (op == op::transfer_notification()) {
        throw_unless(400, equal_slices(sender_address, jetton_address));
        throw_unless(13, msg_value >= min_gas_for_mint);
        
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        int lockup_period = in_msg_body~load_uint(64);
        int now_time = now();
        ;; throw_unless(404, lockup_period == lockup_period_const)  ;; uncomment for fixed lockup period
        ;; TODO change this to a human-read NFT content
        cell nft_content = begin_cell()
                            .store_uint(now_time, 64)  ;; start time
                            .store_uint(lockup_period, 64)  ;; lockup period
                            .store_coins(jetton_amount)  ;; amount of jettons to lock
                          .end_cell();
        cell nft_message = begin_cell()
                            .store_slice(from_address)  
                            .store_ref(nft_content)
                           .end_cell();

        ;; deployment of NFT that proves ownership of locked jettons
        deploy_nft_item(next_item_index, nft_item_code, min_gas_for_mint, nft_message);
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, jetton_address);

        return ();
    }

    ;; NFT transfer notification
    if (op == op::ownership_assigned()) {
        throw_unless(13, msg_value >= min_gas_for_jetton_transfer);

        slice from_address = in_msg_body~load_msg_addr();

        ;; check that nft is from this collection
        int item_index = in_msg_body~load_uint(64);  
        cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);
        throw_unless(400, equal_slices(sender_address, nft_address));

        slice nft_content = in_msg_body~load_ref().begin_parse();

        int start_time = nft_content~load_uint(64);
        int lock_period = nft_content~load_uint(64);
        int end_time = start_time + lock_period;
        int now_time = now();

        ;; check that lockup period is over
        if (now_time < end_time) {   ;; if not - return nft back to user
            var new_msg_body = begin_cell()
                                .store_uint(op::transfer(), 32)
                                .store_uint(query_id, 64)
                                .store_slice(from_address)
                                .store_slice(from_address)
                                .store_uint(0, 1)
                                .store_coins(1)
                                .store_uint(0, 1)
                            .end_cell();
            var msg = begin_cell()
                        .store_uint(0x18, 6)
                        .store_slice(nft_address)
                        .store_coins(0)
                        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                        .store_uint(1, 1)
                        .store_ref(new_msg_body);
            send_raw_message(msg.end_cell(), 64); 
        }
        else {  ;; unstake
            ;; burn nft after unstaking
            var burn_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(10000000)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::burn(), 32)
                .store_uint(query_id, 64)
                .store_slice(owner_address);

            send_raw_message(burn_msg.end_cell(), 0); 

            ;; and send jettons back
            int stacked_amount = nft_content~load_coins();
            var new_msg_body = begin_cell()
                                .store_uint(op::transfer_jetton(), 32)
                                .store_uint(query_id, 64)
                                .store_coins(stacked_amount)
                                .store_slice(from_address)
                                .store_slice(from_address)
                                .store_uint(0, 1)
                                .store_coins(1)
                                .store_uint(0, 1)
                            .end_cell();
            var msg = begin_cell()
                    .store_uint(0x10, 6) 
                    .store_slice(jetton_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                    .store_uint(1, 1)
                    .store_ref(new_msg_body);
            send_raw_message(msg.end_cell(), 64); 
            
        }

        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();

    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = index~divmod(10);
        chars = cons(r + 48, chars);
    } until (index == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));
    
    return (begin_cell()
                .store_uint(1, 8)  ;; offchain tag
                .store_slice(common_content)
                .store_ref(string.store_slice(".json").end_cell())
            .end_cell());
}

slice get_jetton_address() method_id {
    var (_, _, _, _, _, address) = load_data();
    return address;
}